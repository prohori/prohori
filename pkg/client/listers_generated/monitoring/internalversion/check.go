/*
Copyright 2018 The Prohori Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package internalversion

import (
	monitoring "github.com/prohori/prohori/pkg/apis/monitoring"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CheckLister helps list Checks.
type CheckLister interface {
	// List lists all Checks in the indexer.
	List(selector labels.Selector) (ret []*monitoring.Check, err error)
	// Checks returns an object that can list and get Checks.
	Checks(namespace string) CheckNamespaceLister
	CheckListerExpansion
}

// checkLister implements the CheckLister interface.
type checkLister struct {
	indexer cache.Indexer
}

// NewCheckLister returns a new CheckLister.
func NewCheckLister(indexer cache.Indexer) CheckLister {
	return &checkLister{indexer: indexer}
}

// List lists all Checks in the indexer.
func (s *checkLister) List(selector labels.Selector) (ret []*monitoring.Check, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*monitoring.Check))
	})
	return ret, err
}

// Checks returns an object that can list and get Checks.
func (s *checkLister) Checks(namespace string) CheckNamespaceLister {
	return checkNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CheckNamespaceLister helps list and get Checks.
type CheckNamespaceLister interface {
	// List lists all Checks in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*monitoring.Check, err error)
	// Get retrieves the Check from the indexer for a given namespace and name.
	Get(name string) (*monitoring.Check, error)
	CheckNamespaceListerExpansion
}

// checkNamespaceLister implements the CheckNamespaceLister
// interface.
type checkNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Checks in the indexer for a given namespace.
func (s checkNamespaceLister) List(selector labels.Selector) (ret []*monitoring.Check, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*monitoring.Check))
	})
	return ret, err
}

// Get retrieves the Check from the indexer for a given namespace and name.
func (s checkNamespaceLister) Get(name string) (*monitoring.Check, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(monitoring.Resource("check"), name)
	}
	return obj.(*monitoring.Check), nil
}
