/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package monitoring

import (
	"fmt"
	"github.com/kubernetes-incubator/apiserver-builder/pkg/builders"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/endpoints/request"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	InternalAlert = builders.NewInternalResource(
		"alerts",
		"Alert",
		func() runtime.Object { return &Alert{} },
		func() runtime.Object { return &AlertList{} },
	)
	InternalAlertStatus = builders.NewInternalResourceStatus(
		"alerts",
		"AlertStatus",
		func() runtime.Object { return &Alert{} },
		func() runtime.Object { return &AlertList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("monitoring.prohori").WithKinds(
		InternalAlert,
		InternalAlertStatus,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Alert struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   AlertSpec
	Status AlertStatus
}

type AlertSpec struct {
	Type               AlertType
	Command            string
	Flags              map[string]string
	Selector           *ObjectSelector
	Plugin             *CommandPlugin
	CheckInterval      int64
	AlertInterval      int64
	NotifierSecretName string
	Receivers          []NotificationReceiver
}

// AlertPhase is a label for the condition of a alert at the current time.
type AlertPhase string

// These are the valid statuses of alerts.
const (
	// AlertPending means the alert has been accepted by the system, but has not been started.
	// pulling plugins onto the host if necessary.
	AlertPending AlertPhase = "Pending"
	// AlertRunning means the alert has been set.
	AlertRunning AlertPhase = "Running"
	// AlertFailed means that alert has terminated in a failure.
	AlertFailed AlertPhase = "Failed"
	// AlertUnknown means that for some reason the state of the alert could not be obtained.
	AlertUnknown AlertPhase = "Unknown"
)

type AlertStatus struct {
	// Current condition of the alert.
	// +optional
	Phase AlertPhase `json:"phase,omitempty"`
}

type NotificationReceiver struct {
	State    ProblemState
	To       []string
	Notifier string
}

type CommandPlugin struct {
	PluginPullPolicy PullPolicy
	Binary           string
}

type ObjectSelector struct {
	Name        string
	Namespace   string
	MatchLabels map[string]string
}

// copied
type AlertType string

const (
	TypePodAlert     AlertType = "PodAlert"
	TypeNodeAlert    AlertType = "NodeAlert"
	TypeClusterAlert AlertType = "ClusterAlert"
)

type PullPolicy string

const (
	PullPluginAlways       PullPolicy = "Always"
	PullPluginIfNotPresent PullPolicy = "IfNotPresent"
)

type ProblemState string

const (
	StateOK       ProblemState = "OK"
	StateWarning  ProblemState = "WARNING"
	StateCritical ProblemState = "CRITICAL"
)

//
// Alert Functions and Structs
//
// +k8s:deepcopy-gen=false
type AlertStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type AlertStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type AlertList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Alert
}

func (Alert) NewStatus() interface{} {
	return AlertStatus{}
}

func (pc *Alert) GetStatus() interface{} {
	return pc.Status
}

func (pc *Alert) SetStatus(s interface{}) {
	pc.Status = s.(AlertStatus)
}

func (pc *Alert) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Alert) SetSpec(s interface{}) {
	pc.Spec = s.(AlertSpec)
}

func (pc *Alert) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Alert) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Alert) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Alert.
// +k8s:deepcopy-gen=false
type AlertRegistry interface {
	ListAlerts(ctx request.Context, options *internalversion.ListOptions) (*AlertList, error)
	GetAlert(ctx request.Context, id string, options *metav1.GetOptions) (*Alert, error)
	CreateAlert(ctx request.Context, id *Alert) (*Alert, error)
	UpdateAlert(ctx request.Context, id *Alert) (*Alert, error)
	DeleteAlert(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewAlertRegistry(sp builders.StandardStorageProvider) AlertRegistry {
	return &storageAlert{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageAlert struct {
	builders.StandardStorageProvider
}

func (s *storageAlert) ListAlerts(ctx request.Context, options *internalversion.ListOptions) (*AlertList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*AlertList), err
}

func (s *storageAlert) GetAlert(ctx request.Context, id string, options *metav1.GetOptions) (*Alert, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Alert), nil
}

func (s *storageAlert) CreateAlert(ctx request.Context, object *Alert) (*Alert, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*Alert), nil
}

func (s *storageAlert) UpdateAlert(ctx request.Context, object *Alert) (*Alert, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*Alert), nil
}

func (s *storageAlert) DeleteAlert(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}
