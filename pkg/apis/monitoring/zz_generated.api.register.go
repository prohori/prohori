/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package monitoring

import (
	"fmt"
	"github.com/kubernetes-incubator/apiserver-builder/pkg/builders"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/endpoints/request"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	InternalCheck = builders.NewInternalResource(
		"checks",
		"Check",
		func() runtime.Object { return &Check{} },
		func() runtime.Object { return &CheckList{} },
	)
	InternalCheckStatus = builders.NewInternalResourceStatus(
		"checks",
		"CheckStatus",
		func() runtime.Object { return &Check{} },
		func() runtime.Object { return &CheckList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("monitoring.prohori").WithKinds(
		InternalCheck,
		InternalCheckStatus,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type Check struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   CheckSpec
	Status CheckStatus
}

type CheckSpec struct {
	Type               CheckType
	Command            string
	Flags              map[string]string
	Selector           *ObjectSelector
	Plugin             *CommandPlugin
	CheckInterval      int64
	AlertInterval      int64
	NotifierSecretName string
	Receivers          []NotificationReceiver
}

type CheckStatus struct {
	Phase CheckPhase
}

type NotificationReceiver struct {
	State    CheckState
	To       []string
	Notifier string
}

type CommandPlugin struct {
	PluginPullPolicy PullPolicy
	Binary           string
}

type ObjectSelector struct {
	Name        string
	Namespace   string
	MatchLabels map[string]string
}

//
// Check Functions and Structs
//
// Copied from pkg/apis/monitoring/v1alpha1
type CheckPhase string

const (
	CheckPending CheckPhase = "Pending"
	CheckRunning CheckPhase = "Running"
	CheckFailed  CheckPhase = "Failed"
	CheckUnknown CheckPhase = "Unknown"
)

type CheckType string

const (
	CheckTypePod     CheckType = "PodCheck"
	CheckTypeNode    CheckType = "NodeCheck"
	CheckTypeCluster CheckType = "ClusterCheck"
)

type PullPolicy string

const (
	PullPluginAlways       PullPolicy = "Always"
	PullPluginIfNotPresent PullPolicy = "IfNotPresent"
)

type CheckState string

const (
	StateOK       CheckState = "OK"
	StateWarning  CheckState = "WARNING"
	StateCritical CheckState = "CRITICAL"
)

//
// Check Functions and Structs
//
// +k8s:deepcopy-gen=false
type CheckStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type CheckStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type CheckList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []Check
}

func (Check) NewStatus() interface{} {
	return CheckStatus{}
}

func (pc *Check) GetStatus() interface{} {
	return pc.Status
}

func (pc *Check) SetStatus(s interface{}) {
	pc.Status = s.(CheckStatus)
}

func (pc *Check) GetSpec() interface{} {
	return pc.Spec
}

func (pc *Check) SetSpec(s interface{}) {
	pc.Spec = s.(CheckSpec)
}

func (pc *Check) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *Check) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc Check) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store Check.
// +k8s:deepcopy-gen=false
type CheckRegistry interface {
	ListChecks(ctx request.Context, options *internalversion.ListOptions) (*CheckList, error)
	GetCheck(ctx request.Context, id string, options *metav1.GetOptions) (*Check, error)
	CreateCheck(ctx request.Context, id *Check) (*Check, error)
	UpdateCheck(ctx request.Context, id *Check) (*Check, error)
	DeleteCheck(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewCheckRegistry(sp builders.StandardStorageProvider) CheckRegistry {
	return &storageCheck{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageCheck struct {
	builders.StandardStorageProvider
}

func (s *storageCheck) ListChecks(ctx request.Context, options *internalversion.ListOptions) (*CheckList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*CheckList), err
}

func (s *storageCheck) GetCheck(ctx request.Context, id string, options *metav1.GetOptions) (*Check, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*Check), nil
}

func (s *storageCheck) CreateCheck(ctx request.Context, object *Check) (*Check, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*Check), nil
}

func (s *storageCheck) UpdateCheck(ctx request.Context, object *Check) (*Check, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*Check), nil
}

func (s *storageCheck) DeleteCheck(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}
